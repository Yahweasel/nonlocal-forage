// Generated by dts-bundle-generator v9.5.1
/* The dependency on dropbox was then removed (by changing it to "any") to avoid
 * conflicts with dropbox's dependencies (namely @types/node). */

import * as localforageT from 'localforage';

export interface CacheForage {
	localPromise: Promise<unknown>;
	nonlocalPromise: Promise<unknown>;
	local: typeof localforageT;
	nonlocal: typeof localforageT;
	error: any;
}
export interface DropboxGlobalData {
	promise: Promise<unknown>;
	dbx: any;
}
export interface DropboxLocalData {
	dbg: DropboxGlobalData;
	dbx: any;
	dir: string;
}
export interface FSDHData {
	promise: Promise<unknown>;
	root: FileSystemDirectoryHandle;
	path: string;
	dir: FileSystemDirectoryHandle & {
		keys: () => AsyncIterator<string>;
	};
}
export interface GoogleDriveData {
	path: string;
	dirId: string;
}
export interface WebDAVData {
	promise: Promise<unknown>;
	dav: any;
	dir: string;
}
export declare const cacheForage: {
	_driver: string;
	_support: boolean;
	_initStorage: (this: LocalForage & {
		cacheForage: CacheForage;
	}, options: any) => Promise<void>;
	iterate: (this: LocalForage & {
		cacheForage: CacheForage;
	}, iteratorCallback: (key: string) => any, successCallback: () => unknown) => Promise<void>;
	getItem: (this: LocalForage & {
		cacheForage: CacheForage;
	}, key: string, callback?: (value: any) => unknown) => Promise<unknown>;
	setItem: (this: LocalForage & {
		cacheForage: CacheForage;
	}, key: string, value: any, callback?: () => unknown) => Promise<void>;
	removeItem: (this: LocalForage & {
		cacheForage: CacheForage;
	}, key: string, callback?: () => unknown) => Promise<void>;
	clear: (this: LocalForage & {
		cacheForage: CacheForage;
	}, callback?: () => unknown) => Promise<void>;
	length: (this: LocalForage & {
		cacheForage: CacheForage;
	}, callback?: (len: number) => unknown) => Promise<number>;
	key: (this: LocalForage & {
		cacheForage: CacheForage;
	}, index: number, callback?: (key: string) => unknown) => Promise<string>;
	keys: (this: LocalForage & {
		cacheForage: CacheForage;
	}, callback?: (keys: string[]) => unknown) => Promise<string[]>;
	dropInstance: (this: LocalForage & {
		cacheForage: CacheForage;
	}, options?: {
		name?: string;
		storeName?: string;
	}, callback?: () => unknown) => Promise<void>;
};
export declare const dropboxLocalForage: {
	_driver: string;
	_support: boolean;
	_initStorage: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, options: any) => Promise<void>;
	iterate: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, iteratorCallback: (key: string) => any, successCallback: () => unknown) => Promise<void>;
	getItem: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, key: string, callback?: (value: any) => unknown) => Promise<any>;
	setItem: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, key: string, value: any, callback?: () => unknown) => Promise<void>;
	removeItem: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, key: string, callback?: () => unknown) => Promise<void>;
	clear: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, callback?: () => unknown) => Promise<void>;
	length: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, callback?: (len: number) => unknown) => Promise<number>;
	key: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, index: number, callback?: (key: string) => unknown) => Promise<string>;
	keys: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, callback?: (keys: string[]) => unknown) => Promise<string[]>;
	dropInstance: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}, options?: {
		name?: string;
		storeName?: string;
	}, callback?: () => unknown) => Promise<void>;
	storageEstimate: (this: LocalForage & {
		_dbx: DropboxLocalData;
	}) => Promise<{
		quota: any;
		usage: number;
	}>;
};
export declare const fsdhLocalForage: {
	_driver: string;
	_support: boolean;
	_initStorage: (this: LocalForage & {
		_fsdh: FSDHData;
	}, options: any) => Promise<void>;
	iterate: (this: LocalForage & {
		_fsdh: FSDHData;
	}, iteratorCallback: (key: string) => any, successCallback: () => unknown) => Promise<void>;
	getItem: (this: LocalForage & {
		_fsdh: FSDHData;
	}, key: string, callback?: (value: any) => unknown) => Promise<any>;
	setItem: (this: LocalForage & {
		_fsdh: FSDHData;
	}, key: string, value: any, callback?: () => unknown) => Promise<void>;
	removeItem: (this: LocalForage & {
		_fsdh: FSDHData;
	}, key: string, callback?: () => unknown) => Promise<void>;
	clear: (this: LocalForage & {
		_fsdh: FSDHData;
	}, callback?: () => unknown) => Promise<void>;
	length: (this: LocalForage & {
		_fsdh: FSDHData;
	}, callback?: (len: number) => unknown) => Promise<number>;
	key: (this: LocalForage & {
		_fsdh: FSDHData;
	}, index: number, callback?: (key: string) => unknown) => Promise<string>;
	keys: (this: LocalForage & {
		_fsdh: FSDHData;
	}, callback?: (keys: string[]) => unknown) => Promise<string[]>;
	dropInstance: (this: LocalForage & {
		_fsdh: FSDHData;
	}, options?: {
		name?: string;
		storeName?: string;
	}, callback?: () => unknown) => Promise<void>;
};
export declare const googleDriveLocalForage: {
	_driver: string;
	_support: boolean;
	_initStorage: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, options: any) => Promise<void>;
	iterate: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, iteratorCallback: (key: string) => any, successCallback?: () => unknown) => Promise<void>;
	getItem: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, key: string, callback?: (value: any) => unknown) => Promise<any>;
	setItem: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, key: string, value: any, callback?: () => unknown) => Promise<void>;
	removeItem: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, key: string, callback?: () => unknown) => Promise<void>;
	clear: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, callback?: () => unknown) => Promise<void>;
	length: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, callback?: (len: number) => unknown) => Promise<number>;
	key: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, index: number, callback?: (key: string) => unknown) => Promise<string>;
	keys: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, callback?: (keys: string[]) => unknown) => Promise<string[]>;
	dropInstance: (this: LocalForage & {
		_gd: GoogleDriveData;
	}, options?: {
		name?: string;
		storeName?: string;
	}, callback?: () => unknown) => Promise<void>;
	storageEstimate: (this: LocalForage & {
		_gd: GoogleDriveData;
	}) => Promise<{
		quota: number;
		usage: number;
	}>;
};
export declare const webDAVLocalForage: {
	_driver: string;
	_support: boolean;
	_initStorage: (this: LocalForage & {
		_dav: WebDAVData;
	}, options: any) => Promise<void>;
	iterate: (this: LocalForage & {
		_dav: WebDAVData;
	}, iteratorCallback: (key: string) => any, successCallback: () => unknown) => Promise<void>;
	getItem: (this: LocalForage & {
		_dav: WebDAVData;
	}, key: string, callback?: (value: any) => unknown) => Promise<any>;
	setItem: (this: LocalForage & {
		_dav: WebDAVData;
	}, key: string, value: any, callback?: () => unknown) => Promise<void>;
	removeItem: (this: LocalForage & {
		_dav: WebDAVData;
	}, key: string, callback?: () => unknown) => Promise<void>;
	clear: (this: LocalForage & {
		_dav: WebDAVData;
	}, callback?: () => unknown) => Promise<void>;
	length: (this: LocalForage & {
		_dav: WebDAVData;
	}, callback?: (len: number) => unknown) => Promise<any>;
	key: (this: LocalForage & {
		_dav: WebDAVData;
	}, index: number, callback?: (key: string) => unknown) => Promise<string>;
	keys: (this: LocalForage & {
		_dav: WebDAVData;
	}, callback?: (keys: string[]) => unknown) => Promise<string[]>;
	dropInstance: (this: LocalForage & {
		_dav: WebDAVData;
	}, options?: {
		name?: string;
		storeName?: string;
	}, callback?: () => unknown) => Promise<void>;
	storageEstimate: (this: LocalForage & {
		_dav: WebDAVData;
	}) => Promise<{
		quota: number;
		usage: number;
	}>;
};

export {};
